/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var M=Object.defineProperty;var te=Object.getOwnPropertyDescriptor;var ie=Object.getOwnPropertyNames;var ne=Object.prototype.hasOwnProperty;var oe=(i,e)=>{for(var t in e)M(i,t,{get:e[t],enumerable:!0})},se=(i,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of ie(e))!ne.call(i,o)&&o!==t&&M(i,o,{get:()=>e[o],enumerable:!(n=te(e,o))||n.enumerable});return i};var re=i=>se(M({},"__esModule",{value:!0}),i);var ue={};oe(ue,{default:()=>b});module.exports=re(ue);var m=require("obsidian");var c=require("obsidian");var G=require("obsidian"),F=class extends G.AbstractInputSuggest{constructor(t,n){super(t,n);this.inputEl=n}getSuggestions(t){let n=t.toLowerCase(),o=this.app.vault.getAllLoadedFiles().filter(s=>s instanceof G.TFolder&&s.path.toLowerCase().contains(n));return o.sort((s,l)=>s.path.localeCompare(l.path)),o}renderSuggestion(t,n){n.setText(t.path)}selectSuggestion(t){this.inputEl.value=t.path,this.inputEl.trigger("input"),this.close()}};var v=require("obsidian"),T=class extends v.Modal{constructor(e,t,n,o){super(e),this.folderPath=t,this.uidKey=n,this.onConfirm=o}onOpen(){let{contentEl:e}=this;e.empty(),e.createEl("h2",{text:"Confirm UID Deletion"}),e.createEl("p",{text:`Are you sure you want to remove the '${this.uidKey}' metadata property from all notes within the folder "${this.folderPath}" and its subfolders?`}),e.createEl("p",{text:"This action cannot be undone."}).addClass("mod-warning");let t=e.createDiv({cls:"modal-button-container"});new v.Setting(t).addButton(n=>n.setButtonText("Confirm Deletion").setWarning().setCta().onClick(()=>{this.close(),this.onConfirm()})),new v.Setting(t).addButton(n=>n.setButtonText("Cancel").onClick(()=>{this.close()}))}onClose(){let{contentEl:e}=this;e.empty()}};var x=require("obsidian"),$=class extends x.Modal{constructor(e,t,n){super(e),this.plugin=t,this.allFolders=this.getAllFolders(),this.onSettingsChanged=n}getAllFolders(){return this.app.vault.getAllLoadedFiles().filter(e=>e instanceof x.TFolder).sort((e,t)=>e.path.localeCompare(t.path))}onOpen(){let{contentEl:e}=this;e.empty(),e.addClass("uid-folder-exclusion-modal"),e.createEl("h2",{text:"Manage Excluded Folders"}),e.createEl("p",{text:"Add or remove folders from the automatic UID generation exclusion list."}),this.inputEl=e.createEl("input",{type:"text",placeholder:"Search folders..."}),this.inputEl.addClass("uid-search-input"),this.inputEl.addEventListener("input",(0,x.debounce)(()=>this.renderSuggestions(this.inputEl.value),150,!0)),this.suggestionsEl=e.createDiv("uid-suggestion-container"),this.renderSuggestions("")}renderSuggestions(e){this.suggestionsEl.empty();let t=e.toLowerCase().trim(),n=t===""?this.allFolders:this.allFolders.filter(o=>o.path.toLowerCase().includes(t));if(n.length===0){this.suggestionsEl.createDiv({text:"No matching folders found.",cls:"uid-no-results"});return}n.forEach(o=>{let s=this.plugin.settings.autoGenerationExclusions.includes(o.path),l=this.suggestionsEl.createDiv("setting-item");l.createDiv("setting-item-info").createDiv({text:o.path,cls:"setting-item-name"});let u=l.createDiv("setting-item-control").createEl("button");s?(u.setText("Remove"),u.addClass("mod-warning"),u.onclick=()=>this.removeExclusion(o)):(u.setText("Add"),u.addClass("mod-cta"),u.onclick=()=>this.addExclusion(o))})}async addExclusion(e){this.plugin.settings.autoGenerationExclusions.includes(e.path)||(this.plugin.settings.autoGenerationExclusions.push(e.path),this.plugin.settings.autoGenerationExclusions.sort(),await this.plugin.saveSettings(),this.renderSuggestions(this.inputEl.value),this.onSettingsChanged())}async removeExclusion(e){this.plugin.settings.autoGenerationExclusions=this.plugin.settings.autoGenerationExclusions.filter(t=>t!==e.path),await this.plugin.saveSettings(),this.renderSuggestions(this.inputEl.value),this.onSettingsChanged()}onClose(){let{contentEl:e}=this;e.empty()}};var w={uidKey:"uid",autoGenerateUid:!1,autoGenerationScope:"vault",autoGenerationFolder:"",autoGenerationExclusions:[],folderToClear:"",copyFormatString:"{title} - {uidKey}: {uid}",copyFormatStringMissingUid:"{title} - No {uidKey}"},k=class extends c.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;if(e.empty(),e.createEl("h2",{text:"UID Generator Settings"}),e.createEl("h3",{text:"General"}),new c.Setting(e).setName("UID Metadata Key").setDesc('The name of the key for the UID in frontmatter (e.g., "uid", "id"). No spaces.').addText(t=>t.setPlaceholder("Default: uid").setValue(this.plugin.settings.uidKey).onChange(async n=>{let o=n.trim().replace(/\s+/g,"");this.plugin.settings.uidKey=o||w.uidKey,n!==this.plugin.settings.uidKey&&t.setValue(this.plugin.settings.uidKey),await this.plugin.saveSettings(),this.display()})),e.createEl("h3",{text:"Automatic UID Generation"}),e.createEl("p",{text:`Automatically add a ${this.plugin.settings.uidKey} to notes when they are created or opened, if they don't already have one.`}).addClass("setting-item-description"),new c.Setting(e).setName("Enable Automatic UID Generation").addToggle(t=>t.setValue(this.plugin.settings.autoGenerateUid).onChange(async n=>{this.plugin.settings.autoGenerateUid=n,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.autoGenerateUid){new c.Setting(e).setName("Generation Scope").addDropdown(n=>n.addOption("vault","Entire Vault").addOption("folder","Specific Folder").setValue(this.plugin.settings.autoGenerationScope).onChange(async o=>{this.plugin.settings.autoGenerationScope=o,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.autoGenerationScope==="folder"&&new c.Setting(e).setName("Target Folder for Auto-Generation").setDesc("Generate UIDs only for notes in this folder (and subfolders).").addText(n=>{new F(this.app,n.inputEl),n.setPlaceholder("Example: Notes/Inbox").setValue(this.plugin.settings.autoGenerationFolder).onChange(async o=>{this.plugin.settings.autoGenerationFolder=(0,c.normalizePath)(o.trim()),await this.plugin.saveSettings()})}),new c.Setting(e).setName("Excluded Folders").setDesc("Folders excluded from automatic UID generation. Click button to manage.").addButton(n=>n.setButtonText("Manage Exclusions").onClick(()=>{new $(this.app,this.plugin,()=>this.display()).open()}));let t=e.createEl("ul",{cls:"uid-exclusion-list"});this.plugin.settings.autoGenerationExclusions.length>0?[...this.plugin.settings.autoGenerationExclusions].sort().forEach(o=>{t.createEl("li",{text:o})}):t.createEl("li",{text:"No folders excluded."}),t.style.marginTop="5px",t.style.marginBottom="15px",t.style.paddingLeft="20px",t.style.listStyle="none"}new c.Setting(e).setName(`Generate missing ${this.plugin.settings.uidKey}s now`).setDesc(`Manually scan notes based on the current 'Generation Scope' and 'Excluded Folders' settings above. Add a ${this.plugin.settings.uidKey} to any applicable notes that don't already have one. This may take time for large vaults.`).addButton(t=>t.setButtonText("Generate Missing UIDs").setTooltip("Scan and add missing UIDs respecting scope/exclusions").onClick(async()=>{t.setDisabled(!0),t.setButtonText("Processing...");try{await this.plugin.triggerAddMissingUidsInScope()}catch(n){console.error("[UIDGenerator] Error triggering bulk UID generation:",n),new c.Notice("Failed to start bulk generation. See console.",5e3)}finally{t.setDisabled(!1),t.setButtonText("Generate Missing UIDs")}})),e.createEl("h3",{text:"Copy Format"}),e.createEl("p",{text:"Define the format for copied text using placeholders: {title}, {uid}, {uidKey}."}).addClass("setting-item-description"),new c.Setting(e).setName("Format (UID exists)").setDesc("Format string used when copying title and UID, and the UID exists.").addText(t=>t.setPlaceholder(w.copyFormatString).setValue(this.plugin.settings.copyFormatString).onChange(async n=>{this.plugin.settings.copyFormatString=n||w.copyFormatString,await this.plugin.saveSettings()})),new c.Setting(e).setName("Format (UID missing)").setDesc("Format string used when copying, but the note has no UID.").addText(t=>t.setPlaceholder(w.copyFormatStringMissingUid).setValue(this.plugin.settings.copyFormatStringMissingUid).onChange(async n=>{this.plugin.settings.copyFormatStringMissingUid=n||w.copyFormatStringMissingUid,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Manual UID Clearing"}),new c.Setting(e).setName("Folder to clear UIDs from").setDesc("Specify the vault path to remove UIDs from notes within.").addText(t=>{new F(this.app,t.inputEl),t.setPlaceholder("Example: Folder/Subfolder").setValue(this.plugin.settings.folderToClear).onChange(async n=>{this.plugin.settings.folderToClear=(0,c.normalizePath)(n.trim()),await this.plugin.saveSettings()})}),new c.Setting(e).setName("Clear UIDs in Folder").setDesc(`WARNING: This permanently removes the "${this.plugin.settings.uidKey}" metadata from notes in the specified folder/subfolders and temporarily disables auto-generation.`).addButton(t=>t.setButtonText("Clear UIDs Now").setWarning().onClick(async()=>{let n=this.plugin.settings.folderToClear,o=this.plugin.settings.uidKey;if(!n||n.trim()===""){new c.Notice("Please specify a folder path in the 'Folder to clear UIDs from' setting above first.");return}new T(this.app,n,o,async()=>{let s=!1;this.plugin.settings.autoGenerateUid&&(s=!0,this.plugin.settings.autoGenerateUid=!1,await this.plugin.saveSettings(),console.log("[UIDGenerator] Automatic UID generation temporarily disabled due to manual clear action."));try{await this.plugin.clearUIDsInFolder(n)}catch(l){console.error("[UIDGenerator] Error during bulk UID clearing process:",l),new c.Notice("An unexpected error occurred during UID clearing. Check console.",5e3)}finally{s&&new c.Notice("Automatic UID generation was disabled. You can re-enable it in settings if desired.",8e3),this.display()}}).open()}))}};var r=require("obsidian");var D=require("obsidian");var g=[];for(let i=0;i<256;++i)g.push((i+256).toString(16).slice(1));function O(i,e=0){return(g[i[e+0]]+g[i[e+1]]+g[i[e+2]]+g[i[e+3]]+"-"+g[i[e+4]]+g[i[e+5]]+"-"+g[i[e+6]]+g[i[e+7]]+"-"+g[i[e+8]]+g[i[e+9]]+"-"+g[i[e+10]]+g[i[e+11]]+g[i[e+12]]+g[i[e+13]]+g[i[e+14]]+g[i[e+15]]).toLowerCase()}var P,ae=new Uint8Array(16);function K(){if(!P){if(typeof crypto=="undefined"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");P=crypto.getRandomValues.bind(crypto)}return P(ae)}var le=typeof crypto!="undefined"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),N={randomUUID:le};function de(i,e,t){var o,s,l;if(N.randomUUID&&!e&&!i)return N.randomUUID();i=i||{};let n=(l=(s=i.random)!=null?s:(o=i.rng)==null?void 0:o.call(i))!=null?l:K();if(n.length<16)throw new Error("Random bytes length must be >= 16");if(n[6]=n[6]&15|64,n[8]=n[8]&63|128,e){if(t=t||0,t<0||t+16>e.length)throw new RangeError(`UUID byte range ${t}:${t+15} is out of buffer bounds`);for(let a=0;a<16;++a)e[t+a]=n[a];return e}return O(n)}var L=de;function C(){return L()}function f(i,e){if(!e)return null;try{let t=i.app.metadataCache.getFileCache(e),n=t==null?void 0:t.frontmatter;if(!n)return null;let o=n[i.settings.uidKey];return typeof o=="string"||typeof o=="number"?String(o):null}catch(t){return console.error(`[UIDGenerator] Error reading metadata for ${e.path}:`,t),null}}async function E(i,e,t,n=!1){if(!e||!(e instanceof D.TFile)||e.extension!=="md")return!1;if(!t)return console.warn(`[UIDGenerator] Attempted to set an empty UID for ${e.path}. Aborting.`),!1;let o=!1,s=i.settings.uidKey,l=!1;try{return await i.app.fileManager.processFrontMatter(e,a=>{let p=a[s];if(l=p!=null&&p!=="",l&&!n){console.log(`[UIDGenerator] ${s} already exists for ${e.path}, not overwriting.`),o=!1;return}a[s]!==t?(a[s]=t,o=!0):o=!1,s!=="uid"&&a.hasOwnProperty("uid")&&delete a.uid,s!=="Uid"&&a.hasOwnProperty("Uid")&&delete a.Uid,s!=="UID"&&a.hasOwnProperty("UID")&&delete a.UID}),o&&console.log(`[UIDGenerator] ${l&&n?"Overwrote":"Set"} ${s} for ${e.path}.`),o}catch(a){return console.error(`[UIDGenerator] Error processing frontmatter for ${e.path} during setUID:`,a),new D.Notice(`Error setting ${s}. Check console.`,5e3),!1}}async function V(i,e){if(!e||!(e instanceof D.TFile))return!1;let t=!1,n=i.settings.uidKey;try{return await i.app.fileManager.processFrontMatter(e,o=>{o.hasOwnProperty(n)&&(t=!0,delete o[n])}),t&&console.log(`[UIDGenerator] Removed key "${n}" from ${e.path}`),t}catch(o){return console.error(`[UIDGenerator] Error processing frontmatter for ${e.path} during removal:`,o),new D.Notice(`Error removing ${n}. Check console.`,5e3),!1}}function I(i,e,t,n){let o=e,s=i.settings.uidKey;return o=o.replace(/{title}/g,t||""),o=o.replace(/{uidKey}/g,s||""),o=o.replace(/{uid}/g,n||""),o}async function z(i,e=!0){let t=i.app.workspace.getActiveViewOfType(r.MarkdownView);if(t!=null&&t.file){let n=t.file,o=C();await E(i,n,o,e)?new r.Notice(`${i.settings.uidKey} ${e?"updated/set":"set"} for ${n.basename}`):!e&&f(i,n)&&new r.Notice(`Note ${n.basename} already has a ${i.settings.uidKey}. Use "Generate/Update" command to overwrite.`)}else new r.Notice("No active Markdown file selected.")}async function R(i){let e=i.app.workspace.getActiveViewOfType(r.MarkdownView);if(e!=null&&e.file){let t=e.file;if(f(i,t)){new r.Notice(`Note ${t.basename} already has a ${i.settings.uidKey}.`);return}let o=C();await E(i,t,o,!1)&&new r.Notice(`${i.settings.uidKey} created for ${t.basename}`)}else new r.Notice("No active Markdown file selected.")}async function j(i){let e=i.app.workspace.getActiveViewOfType(r.MarkdownView),t=e==null?void 0:e.file;t?await V(i,t)?new r.Notice(`${i.settings.uidKey} removed from ${t.basename}`):f(i,t)||new r.Notice(`No ${i.settings.uidKey} found on ${t.basename}.`):new r.Notice("No active Markdown file to remove UID from.")}function _(i){let e=i.app.workspace.getActiveViewOfType(r.MarkdownView),t=e==null?void 0:e.file;if(!t){new r.Notice("No active file.");return}let n=f(i,t);n?navigator.clipboard.writeText(n).then(()=>new r.Notice(`${i.settings.uidKey} copied: ${n}`)).catch(o=>{console.error("[UIDGenerator] Error copying UID:",o),new r.Notice("Error copying UID to clipboard.",5e3)}):new r.Notice(`No ${i.settings.uidKey} found to copy.`)}function W(i,e){var l;let t=null;if(e)t=e;else{let a=i.app.workspace.getActiveViewOfType(r.MarkdownView);t=(l=a==null?void 0:a.file)!=null?l:null}if(!t){new r.Notice("No active/specified file found.");return}let n=f(i,t),o=t.basename,s;n?s=I(i,i.settings.copyFormatString,o,n):s=I(i,i.settings.copyFormatStringMissingUid,o,null),navigator.clipboard.writeText(s).then(()=>new r.Notice(`Copied: ${s}`)).catch(a=>{console.error("[UIDGenerator] Error copying title + UID:",a),new r.Notice("Error copying to clipboard.",5e3)})}async function Q(i,e){console.log(`[UIDGenerator] Copying titles+${i.settings.uidKey}s for folder: ${e.path}`);let t=i.app.vault.getMarkdownFiles(),n=[],o=e.path;for(let d of t)(o==="/"?d.path!=="/":d.path.startsWith(o+"/"))&&!n.some(y=>y.path===d.path)&&n.push(d);if(n.length===0){new r.Notice(`No markdown notes found in "${e.name}".`);return}let s=[],l=0,a=i.settings.copyFormatString,p=i.settings.copyFormatStringMissingUid;for(let d of n){let h=d.basename,y=f(i,d);y?(s.push(I(i,a,h,y)),l++):s.push(I(i,p,h,null))}let u=s.join(`
`);try{await navigator.clipboard.writeText(u),new r.Notice(`Copied ${s.length} items from "${e.name}" using format.`)}catch(d){console.error("[UIDGenerator] Error copying folder items to clipboard:",d),new r.Notice("Failed to copy to clipboard. See console.",5e3)}}async function X(i,e){W(i,e)}async function B(i,e){if(!e||e.length===0){new r.Notice("No Markdown files found in selection.");return}console.log(`[UIDGenerator] Copying titles+${i.settings.uidKey}s for ${e.length} selected files via context menu.`);let t=[],n=0,o=i.settings.copyFormatString,s=i.settings.copyFormatStringMissingUid;for(let a of e){let p=a.basename,u=f(i,a);u?(t.push(I(i,o,p,u)),n++):t.push(I(i,s,p,null))}let l=t.join(`
`);try{await navigator.clipboard.writeText(l),new r.Notice(`Copied ${t.length} selected items using format.`)}catch(a){console.error("[UIDGenerator] Error copying selected items (files-menu) to clipboard:",a),new r.Notice("Failed to copy selected items to clipboard. See console.",5e3)}}async function Y(i){let e=i.app.workspace.getLeavesOfType("file-explorer").find(o=>o.view.selectedFiles&&i.app.workspace.activeLeaf===o);if(!e||!e.view.selectedFiles){new r.Notice("No active file explorer with selected files found.");return}let t=e.view.selectedFiles||[];if(t.length===0){new r.Notice("No files selected in the file explorer.");return}let n=[];for(let o of t){let s=i.app.vault.getAbstractFileByPath(o);s instanceof r.TFile&&s.extension==="md"&&n.push(s)}if(n.length===0){new r.Notice("No *Markdown* files selected.");return}await B(i,n)}async function q(i,e){let t=(0,r.normalizePath)(e);if(!t){new r.Notice("Folder path empty.");return}let n=i.app.vault.getAbstractFileByPath(t);if(!n||!(n instanceof r.TFolder)){new r.Notice(`Folder not found or path is not a folder: ${e}`);return}console.log(`[UIDGenerator] Starting UID clearing process for folder: ${n.path} using key "${i.settings.uidKey}"`),new r.Notice(`Clearing ${i.settings.uidKey}s in "${n.name}"... This may take a moment.`);let o=i.app.vault.getMarkdownFiles(),s=[],l=n.path;for(let d of o)(l==="/"?d.path!=="/":d.path.startsWith(l+"/"))&&!s.some(y=>y.path===d.path)&&s.push(d);if(s.length===0){new r.Notice(`No markdown files found within "${n.name}".`);return}console.log(`[UIDGenerator] Found ${s.length} markdown files to process.`);let a=0,p=0;for(let d of s)try{await V(i,d)&&a++}catch(h){p++}let u=`UID clearing complete for "${n.name}". Removed ${a} ${i.settings.uidKey}s.`;p>0&&(u+=` Encountered ${p} errors (check console).`),new r.Notice(u,1e4),console.log(`[UIDGenerator] UID clearing finished. Removed: ${a}, Errors: ${p}`)}async function J(i,e){var o;if(!i.settings.autoGenerateUid||!e||!(e instanceof r.TFile)||e.extension!=="md")return;let t=(0,r.normalizePath)(e.path);if(i.settings.autoGenerationExclusions.some(s=>{let l=(0,r.normalizePath)(s.trim());return l&&(t.startsWith(l+"/")||t===l)}))return;if(i.settings.autoGenerationScope==="folder"){let s=(0,r.normalizePath)(i.settings.autoGenerationFolder.trim());if(!s||!(t.startsWith(s+"/")||((o=e.parent)==null?void 0:o.path)===s))return}if(f(i,e))return;console.log(`[UIDGenerator] Auto-generating ${i.settings.uidKey} for: ${e.path}`);let n=C();await E(i,e,n,!1)}async function Z(i){var u;let e=i.app.vault.getMarkdownFiles();if(e.length===0){new r.Notice("No Markdown files found in the vault.");return}let t=0,n=0,o=0,s=0,l=e.length,a=`Processing ${l} files for missing UIDs...`,p=new r.Notice(a,0);console.log(`[UIDGenerator] Starting bulk check for missing UIDs. Scope: ${i.settings.autoGenerationScope}.`);try{for(let d=0;d<l;d++){let h=e[d],y=(0,r.normalizePath)(h.path);d%50===0&&d>0&&p.setMessage(`${a}
(${d}/${l})`);let S=!0;if(i.settings.autoGenerationExclusions.some(U=>{let A=(0,r.normalizePath)(U.trim());return A&&(y.startsWith(A+"/")||y===A)})&&(S=!1),S&&i.settings.autoGenerationScope==="folder"){let U=(0,r.normalizePath)(i.settings.autoGenerationFolder.trim());(!U||!(y.startsWith(U+"/")||((u=h.parent)==null?void 0:u.path)===U))&&(S=!1)}if(!S){o++;continue}if(f(i,h)){n++;continue}let ee=C();try{await E(i,h,ee,!1)?t++:s++}catch(U){console.error(`[UIDGenerator] Unexpected error setting UID for ${h.path}:`,U),s++}d%100===0&&d>0&&await new Promise(U=>setTimeout(U,0))}}finally{p.hide();let d=`Bulk UID Generation Complete:
- Added: ${t}
- Skipped (already had UID): ${n}
- Skipped (out of scope/excluded): ${o}`;s>0&&(d+=`
- Errors: ${s} (see console)`),new r.Notice(d,1e4+s*100),console.log(`[UIDGenerator] ${d.replace(/\n- /g,", ")}`)}}var b=class extends m.Plugin{async onload(){console.log("Loading UID Generator Plugin v7 (files-menu)"),await this.loadSettings(),this.addRibbonIcon("fingerprint",`Create ${this.settings.uidKey} if missing`,()=>{R(this)});let e=(0,m.debounce)(J.bind(null,this),500,!0);this.registerEvent(this.app.vault.on("create",t=>{t instanceof m.TFile&&t.extension==="md"&&e(t)})),this.registerEvent(this.app.workspace.on("file-open",t=>{if(t instanceof m.TFile&&t.extension==="md"){let n=this.app.workspace.getActiveViewOfType(m.MarkdownView);n&&n.file===t&&e(t)}})),this.addCommand({id:"generate-update-uid",name:`Generate/Update ${this.settings.uidKey} (Overwrites)`,editorCallback:(t,n)=>{z(this,!0)}}),this.addCommand({id:"create-uid-if-missing",name:`Create ${this.settings.uidKey} if missing`,editorCallback:(t,n)=>{R(this)}}),this.addCommand({id:"remove-uid",name:`Remove ${this.settings.uidKey} from current note`,editorCallback:(t,n)=>{j(this)}}),this.addCommand({id:"copy-uid",name:`Copy ${this.settings.uidKey} of current note`,editorCheckCallback:(t,n,o)=>{let s=o.file;return!s||!f(this,s)?!1:(t||_(this),!0)}}),this.addCommand({id:"copy-title-uid",name:`Copy title + ${this.settings.uidKey}`,editorCheckCallback:(t,n,o)=>{let s=o.file;return s?(t||W(this,s),!0):!1}}),this.addCommand({id:"copy-title-uid-for-selection",name:`Copy titles+${this.settings.uidKey}s for selected files`,checkCallback:t=>{var l;let n=(l=this.app.workspace.getLeavesOfType("file-explorer"))==null?void 0:l.find(a=>a.view.selectedFiles&&this.app.workspace.activeLeaf===a),o=!1;return n&&(o=(n.view.selectedFiles||[]).some(p=>{let u=this.app.vault.getAbstractFileByPath(p);return u instanceof m.TFile&&u.extension==="md"})),!!n&&o?(t||Y(this),!0):!1}}),this.registerEvent(this.app.workspace.on("file-menu",(t,n,o,s)=>{n instanceof m.TFolder?t.addItem(l=>{l.setTitle(`Copy titles+${this.settings.uidKey}s from "${n.name}"`).setIcon("copy").onClick(()=>Q(this,n))}):n instanceof m.TFile&&n.extension==="md"&&t.addItem(l=>{l.setTitle(`Copy Title+${this.settings.uidKey}`).setIcon("copy").onClick(()=>X(this,n))})})),this.registerEvent(this.app.workspace.on("files-menu",(t,n,o,s)=>{if(o!=="file-explorer-context-menu")return;let l=n.filter(a=>a instanceof m.TFile&&a.extension==="md");l.length>0&&t.addItem(a=>{a.setTitle(`Copy titles+${this.settings.uidKey}s for ${l.length} selected`).setIcon("copy").onClick(()=>B(this,l))})})),this.addSettingTab(new k(this.app,this))}onunload(){console.log("Unloading UID Generator Plugin v7 (files-menu)")}async loadSettings(){this.settings=Object.assign({},w,await this.loadData()),Array.isArray(this.settings.autoGenerationExclusions)||(this.settings.autoGenerationExclusions=[]),this.settings.copyFormatString=this.settings.copyFormatString||w.copyFormatString,this.settings.copyFormatStringMissingUid=this.settings.copyFormatStringMissingUid||w.copyFormatStringMissingUid}async saveSettings(){await this.saveData(this.settings)}async clearUIDsInFolder(e){await q(this,e)}async triggerAddMissingUidsInScope(){await Z(this)}};

/* nosourcemap */